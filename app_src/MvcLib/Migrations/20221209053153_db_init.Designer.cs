// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcLib.Db;

namespace MvcLib.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221209053153_db_init")]
    partial class db_init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.18");

            modelBuilder.Entity("MvcLib.DbEntity.FileEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestpaperUploadid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fk_id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isShow")
                        .HasColumnType("INTEGER");

                    b.Property<long>("length")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("make_day")
                        .HasColumnType("TEXT");

                    b.Property<string>("maker")
                        .HasColumnType("TEXT");

                    b.Property<int>("orderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("path")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("TestpaperUploadid");

                    b.ToTable("app_files");
                });

            modelBuilder.Entity("MvcLib.DbEntity.MainContent.ColumnData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MakeDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Maker")
                        .HasColumnType("TEXT");

                    b.Property<string>("Memo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("column_datas");
                });

            modelBuilder.Entity("MvcLib.DbEntity.MainContent.TestpaperProps", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("nianfen_or_shengfen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("testpaper_props");
                });

            modelBuilder.Entity("MvcLib.DbEntity.MainContent.TestpaperUpload", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("columnId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("make_day")
                        .HasColumnType("TEXT");

                    b.Property<int>("nfId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("sfId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("columnId");

                    b.HasIndex("nfId");

                    b.HasIndex("sfId");

                    b.ToTable("testpaper_upload_logs");
                });

            modelBuilder.Entity("MvcLib.MainContent.Binding", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("banben_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("leixing_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("maker")
                        .HasColumnType("TEXT");

                    b.Property<int>("mokuai_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("xueke_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("bindings");
                });

            modelBuilder.Entity("MvcLib.MainContent.ItemCategory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("category")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isShow")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("make_day")
                        .HasColumnType("TEXT");

                    b.Property<string>("memo")
                        .HasColumnType("TEXT");

                    b.Property<int>("orderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("update_day")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("MvcLib.MainContent.PdfFile", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("file_size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("file_type")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("make_day")
                        .HasColumnType("TEXT");

                    b.Property<int>("pdfId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("saving_path")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("pdfId");

                    b.ToTable("pdf_files");
                });

            modelBuilder.Entity("MvcLib.MainContent.PdfUploadLog", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("bindingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("image_path")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isShow")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("make_day")
                        .HasColumnType("TEXT");

                    b.Property<string>("maker")
                        .HasColumnType("TEXT");

                    b.Property<string>("memo")
                        .HasColumnType("TEXT");

                    b.Property<int>("orderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("update_day")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("bindingId");

                    b.ToTable("pdf_upload_logs");
                });

            modelBuilder.Entity("MvcLib.MainContent.Pdf_Url", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("image_path")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("make_day")
                        .HasColumnType("TEXT");

                    b.Property<int>("pdfId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("pdf_url")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("pdfId");

                    b.ToTable("pdf_urls");
                });

            modelBuilder.Entity("MvcLib.Sidebar.AppSidebar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Route")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isShow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("orderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ModuleId");

                    b.ToTable("sidebars");
                });

            modelBuilder.Entity("MvcLib.Sidebar.MenuModule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isShow")
                        .HasColumnType("INTEGER");

                    b.Property<int>("orderNo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("menu_modules");
                });

            modelBuilder.Entity("MvcLib.DbEntity.FileEntity", b =>
                {
                    b.HasOne("MvcLib.DbEntity.MainContent.TestpaperUpload", null)
                        .WithMany("testpaper_docs")
                        .HasForeignKey("TestpaperUploadid");
                });

            modelBuilder.Entity("MvcLib.DbEntity.MainContent.TestpaperUpload", b =>
                {
                    b.HasOne("MvcLib.DbEntity.MainContent.ColumnData", "column")
                        .WithMany()
                        .HasForeignKey("columnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcLib.DbEntity.MainContent.TestpaperProps", "nf")
                        .WithMany()
                        .HasForeignKey("nfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcLib.DbEntity.MainContent.TestpaperProps", "sf")
                        .WithMany()
                        .HasForeignKey("sfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MvcLib.MainContent.PdfFile", b =>
                {
                    b.HasOne("MvcLib.MainContent.PdfUploadLog", "pdf")
                        .WithMany("pdf_files")
                        .HasForeignKey("pdfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MvcLib.MainContent.PdfUploadLog", b =>
                {
                    b.HasOne("MvcLib.MainContent.Binding", "binding")
                        .WithMany()
                        .HasForeignKey("bindingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MvcLib.MainContent.Pdf_Url", b =>
                {
                    b.HasOne("MvcLib.MainContent.PdfUploadLog", "pdf")
                        .WithMany("pdf_Urls")
                        .HasForeignKey("pdfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MvcLib.Sidebar.AppSidebar", b =>
                {
                    b.HasOne("MvcLib.Sidebar.MenuModule", "Module")
                        .WithMany("Sidebars")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
